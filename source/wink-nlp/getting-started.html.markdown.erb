---
title: Getting started
---

# Getting started

Let's start with "Hello, World!" in winkNLP. First we'll install the `wink-nlp` package. Next, we'll use that package to install the <a href="https://github.com/winkjs/wink-eng-lite-model"><code>wink-eng-lite-model</code></a>:

<pre class="prettyprint source"><code>npm install wink-nlp --save
node -e "require( 'wink-nlp/models/install' )" wink-eng-lite-model</code></pre>

<div class="docs-tip docs-tip--yellow" style="margin-top: -1rem;">
   If youâ€™re using winkNLP in the browser use the <a href="https://www.npmjs.com/package/wink-eng-lite-web-model">wink-eng-lite-web-model</a> instead. Learn about its installation and usage in our <a href="/wink-nlp/how-to-run-wink-nlp-in-browser.html">guide to using winkNLP in the browser</a>.
</div>

We start our code by loading the `wink-nlp` package, some helpers, and the language model. Then we instantiate winkNLP using the language model:

<pre class="prettyprint source lang-javascript"><code>// Load wink-nlp package  & helpers.
const winkNLP = require( 'wink-nlp' );
// Load "its" helper to extract item properties.
const its = require( 'wink-nlp/src/its.js' );
// Load "as" reducer helper to reduce a collection.
const as = require( 'wink-nlp/src/as.js' );
// Load english language model â€” light version.
const model = require( 'wink-eng-lite-model' );
// Instantiate winkNLP.
const nlp = winkNLP( model );</code></pre>

Next, we use the `readDoc()` method of winkNLP. It transforms the input text string into a winkNLP document. It is the centerpiece of your code. The document provides a rich set of chainable API methods for easy navigation through it's sentences, entities and/or tokens. This simplifies information processing and extraction from a document.

<pre class="prettyprint source lang-javascript"><code>const text = 'Hello   WorldðŸŒŽ! How are you?';
const doc = nlp.readDoc( text );

console.log( doc.out() );
// -> Hello   WorldðŸŒŽ! How are you?

console.log( doc.tokens().out( its.type, as.freqTable ) );
// -> [ [ 'word', 5 ], [ 'punctuation', 2 ], [ 'emoji', 1 ] ]</code></pre>

<div class="docs-tip docs-tip--green">
winkNLP has a lossless tokenizer â€” notice how it has preserved and reproduced all the spaces between "Hello" and "World" in the first example.
</div>

The `out()` method always returns JavaScriptâ€™s built-in datatypes â€” most often arrays of Strings or objects. `doc.out()` is context dependent, for example, it produces a string when used on `doc`, but when applied on sentences, entities, or tokens, it outputs an array of strings:

<pre class="prettyprint source lang-javascript"><code>console.log( doc.sentences().out() );
// -> [ 'Hello   WorldðŸŒŽ!', 'How are you?' ]

console.log( doc.entities().out( its.detail ) );
// -> [ { value: 'ðŸŒŽ', type: 'EMOJI' } ]

console.log( doc.tokens().out() );
// -> [ 'Hello', 'World', 'ðŸŒŽ', '!', 'How', 'are', 'you', '?' ]</code></pre>

Let's explore the wink-nlp document in the [next section](document.html).

<div class="l-horizontal">
  <div class="empty-nav-link">&nbsp;</div>

  <a href="processing-pipeline.html" class="bottom-nav-link next-nav-link">
    <span class="bottom-nav-link__title">Next</span>
    Processing Pipeline
  </a>
</div>
