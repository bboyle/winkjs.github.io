---
title: Document
---

# Document

The document provides different views — dynamically — based on your context. It can be viewed as  a __collection__ of tokens while in another context it could be a collection of sentences or a collection of named entities such as time, date, or URLs. It lets you access these in a flexible manner. Consider the following text:


<pre class="prettyprint source lang-javascript"><code>const text = `On July 20, 1969, a voice crackled from the speakers. He said simply, "the Eagle has landed." They spent nearly 21 hours on the lunar surface. 20% of the world\'s population watched humans walk on Moon.`;

const doc = nlp.readDoc(text);</code></pre>


The document has `sentences()`, `entities()` and `tokens()` methods to obtain their collection:



<pre class="prettyprint source lang-javascript"><code>doc.sentences().out();
// Returns:
// [ 'On July 20, 1969, a voice crackled from the speakers.',
//   'He said simply, "the Eagle has landed."',
//   'They spent nearly 21 hours on the lunar surface.',
//   '20% of the world\'s population watched humans walk on Moon.'
// ]

doc.entities().out();
// Returns:
// [ 'July 20, 1969', 'nearly 21 hours', '20%' ]

doc.tokens().out();
// Returns:
// [ 'On', 'July', '20', ',', ... 'walk', 'on', 'Moon', '.' ]</code></pre>


Each element of a collection is referred to as an __item__. In other words a single_ token, entity, or sentence is an item. An item is accessed via the `itemAt(n)` method, where `n` is the index of the item. Like JavaScript, this index is also 0-based. For example:


<pre class="prettyprint source lang-javascript"><code>doc.entities().itemAt(1).out();
// Returns:
// 'nearly 21 hours'</code></pre>

Since `out()` was called on an item, it automatically returned a string instead of an array.

<div class="docs-tip docs-tip--green">
By default, the <code>out()</code> returns a <strong>string</strong> when it is applied to an <strong>item</strong> and an <strong>array of strings</strong> when it is applied to a <strong>collection</strong>.
</div>

Next, let’s look at what a single sentence or entity might look like:

<pre class="prettyprint source lang-javascript"><code>doc.sentences().itemAt(0).entities().out();
// Returns:
// [ 'July 20, 1969' ]
doc.sentences()   // Collection of all sentences.
        .itemAt(0)     // Its 0th sentence.
        .entities()    // Collection of entities in sentence #0.
        .itemAt(0)     // Its 0th entity.
        .tokens()      // Collection of tokens in entity #0.
        .out();           // Array of tokens in 0th entity of
                       // 0th sentence of the document!
// Returns:
// [ 'July', '20', ',', '1969' ]</code></pre>

An attempt to access a non-existent item using `itemAt()` returns `undefined`:

<pre class="prettyprint source lang-javascript"><code>doc.sentences().itemAt(-1);
// Returns:
// undefined</code></pre>

<div class="docs-tip docs-tip--green">
The document also provides the <code>pipeConfig()</code> method, which returns the currently active processing pipeline based on the loaded language model.
</div>

In essence, a document is composed of collections of sentences, named entities, and tokens. Collections and items along with their methods are explained in the [next section](collection.html).

<div class="l-horizontal">
  <a href="processing-pipeline.html" class="bottom-nav-link">
    <span class="bottom-nav-link__title">Previous</span>
    Processing Pipeline
  </a>

  <a href="collection.html" class="bottom-nav-link next-nav-link">
    <span class="bottom-nav-link__title">Next</span>
    Collection
  </a>
</div>
