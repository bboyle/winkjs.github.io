# filter()
<code class="signature">.filter( callback ) -> { collection }</code>

This API works only with a collection of entities and tokens.
It returns a new wink-nlp collection of the same kind. The filtered collection contains items that pass the test implemented by the callback function which is provided as a parameter. The callback function accepts each item of the parent collection (on which the filter() is applied) as a parameter. It works like the JavaScript filter() method.
This filtered collection can be treated like any other wink-nlp and can be chained with other APIs like itemAt(), length(), each(), etc. To get the collection in a JavaScript data type, you need to follow this API with out().
No other wink-nlp APIs can be chained after an output is generated in a JavaScript data type. Which means that you can not follow the out() API with any other APIs offered by wink-nlp. You can, however, work with the output generated by the out() API using JavaScript methods.

__Examples:__

<pre class="prettyprint source lang-javascript"><code>// Input text
const text = `#Breaking: Canâ€™t get over this #Oscars selfie from @TheEllenShowðŸ¤©! Go check it out:)https://pic.twitter.com/C9U5NOtGap #Share your best selfie@r2d2@gmail.comðŸ’¯`;</code></pre>

## entities.filter()
<code class="signature">doc.entities().filter( callback ) -> { collection }</code>

<pre class="prettyprint source lang-javascript"><code>// Boilerplate code and input text goes here
const doc = nlp.readDoc( text );
const hashtags = doc.entities()
                  .filter( (e) => (e.out( its.type ) === 'HASHTAG') )
                  .out();
console.log( hashtags );
// -> [ '#Breaking', '#Oscars', '#Share' ]</code></pre>

## customEntities().filter()

## tokens().filter()
<code class="signature">doc.tokens().filter( callback ) -> { collection }</code>

<pre class="prettyprint source lang-javascript"><code>// Boilerplate code and input text goes here
const doc = nlp.readDoc( text );
const punctuations = doc.tokens()
                      .filter((t)=>(t.out(its.type)==='punctuation'))
                      .out();
console.log( punctuations );
// -> [ ':', '!' ]</code></pre>
