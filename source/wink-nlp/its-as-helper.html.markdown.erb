# <code>its</code> helper

The wink-nlp document, collection and item have several __contextual__ properties that are accessible via <code>its.<strong>propertyName</strong></code>, an argument of the `out()` method.

The bold part of the argument, i.e., <code><strong>propertyName</strong></code>, needs to be substituted with a value from the following table, according to requirement. For example, after substituting the value, the argument can be `its.stopWordFlag`, `its.shape`, `its.vector`, etc. The default value of this argument is `its.value`.

The method `out( its.value )` returns a _string_ when it is applied to a `document` or `item` and an _array of strings_ when it is applied to a `collection`. The other properties follow the same behaviour.

For example, `token.out( its.abbrevFlag )` returns a `boolean` value, whereas `tokens().out( its.abbrevFlag )` returns a `boolean` array. This array holds the return value of each `token.out( its.abbrevFlag )` for the tokens collection.

__Examples:__
<pre class="prettyprint source lang-javascript"><code>const text = `I work for AI Inc.`;
const doc = nlp.readDoc( text );
// Check abbreviation flag for a token item
const t1 = doc.tokens()
              .itemAt( 0 ) // -> I
console.log( t1.out(its.abbrevFlag) );
// -> false
const t2 = doc.tokens()
              .itemAt( 4 ) // -> Inc.
console.log( t2.out(its.abbrevFlag) );
// -> true
// Check abbreviation flag for a token collection
console.log(doc.tokens().out(its.abbrevFlag));
// -> [ false, false, false, false, true ]</code></pre>

<div class="docs-tip">
  <strong>Convention:</strong> In the following table, if a propertyName applies to any wink-nlp item type, then it applies to its corresponding collection as well. For example, as the table mentions that its.abbrevFlag applies to a token item, then it also applies to a token collection.
</div>

## propertyName

# <code>as</code> helper

The `out()` method for a collection has two parameters â€” <code>its.<stong>propertyName</stong></code> and <code>as.<strong>reducedValue</strong></code>. As the name suggests, a collection can be reduced to frequency table, bag of words, etc via the <code>as.<strong>reducedValue</strong></code> argument.

The bold part of the argument, i.e., <code><strong>reducedValue</strong></code>, needs to be substituted with a value from the following table, according to requirement. For example, after substituting the value, the argument can be `as.freqTable`, `as.bigrams`, `as.array`, etc. The default value of this argument is `as.array`.

## reducedValue
<table>
  <tr>
    <th>reducedValue</th>
    <th>Description</th>
    <th>Applies to</th>
    <th>Type</th>
  </tr>
  <tr>
    <td><code>as.array</code></td>
    <td>Collection reduced to JavaScript array This is the default reducer.</td>
    <td>Sentences, Entities, Tokens</td>
    <td><code>string[]</code></td>
  </tr>
  <tr>
    <td><code>as.bigrams</code></td>
    <td>Tokens reduced to Bigrams</td>
    <td>Tokens</td>
    <td><code>2D string[]</code></td>
  </tr>
  <tr>
    <td><code>as.bow</code></td>
    <td>Bag of words of entities, entity types or tokens</td>
    <td>Entities, Tokens</td>
    <td><code>object</code></td>
  </tr>
  <tr>
    <td><code>as.freqTable</code></td>
    <td>A frequency table in descending order</td>
    <td>Sentence, Entities, Tokens</td>
    <td><code>2D number[]</code></td>
  </tr>
  <tr>
    <td><code>as.unique</code></td>
    <td>Unique array of entities, entity types or tokens</td>
    <td>Entities, Tokens</td>
    <td><code>string[]</code></td>
  </tr>
</table>
