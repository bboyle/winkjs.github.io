---
title: Similarity
---

# similarity
<code class="signature">similarity → { object }</code>

This utility has multiple text similarity detection methods — cosine for bag of words, tversky and Otsuka-Ochiai for set. The bag-of-words model of a document can be obtained using `as.bow` and set can be derived using `as.set`. For example:

<pre class="prettyprint source"><code>// Obtain the bow of a document.
bow1 = doc1.tokens().out(its.value, as.bow);
// Obtain the set of a document.
set1 = doc1.tokens().out(its.value, as.set);</code></pre>

It is also possible to pre-process the text prior to comparison using winkNLP's methods. For example stop words or punctuations can be removed using the .filter() method before obtaining a bow or set.

Require this utility using the following statement:

<pre class="prettyprint source"><code>const similarity = require('wink-nlp/utilities/similarity.js');</code></pre>

The variable — similarity exposes following methods:

<table>
  <tr>
    <th>Name</th>
    <th>Description</th>
  </tr>

  <tr>
    <td><code>similarity.bow.cosine(bowA, bowB)</code></td>
    <td>Measures similarity between the two BoWs using cosine similarity.</td>
  </tr>

  <tr>
    <td><code>similarity.set.tversky(setA, setB`<br/> `[, alpha, beta])</code></td>
    <td>Measures similarity between the two sets using Tversky method. The default values for both alpha & beta is 0.5. You can get Jaccard similarity or Sørensen-Dice by using appropriate values for alpha & beta.</td>
  </tr>

  <tr>
    <td><code>similarity.set.oo(setA, setB)</code></td>
    <td>Measures Otsuka-Ochiai similarity between the two sets; this is equivalent to cosine similarity with a binarized BoW.</td>
  </tr>
</table>

All methods return a value between **0** and **1**.
